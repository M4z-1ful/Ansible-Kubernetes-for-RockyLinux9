---
- hosts: masters,workers
  remote_user: "[current-user]"
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh
  any_errors_fatal: true
  tasks:
    - name: Update /etc/hosts with all cluster nodes from inventory
      blockinfile:
        path: /etc/hosts
        block: |
          {% for host in groups['masters'] + groups['workers'] %}
          {{ hostvars[host]['ansible_host'] }} {{ host }}
          {% endfor %}
      when: groups['masters'] is defined and groups['workers'] is defined
    - name: create containerd configuration file
      file:
        path: /etc/modules-load.d/containerd.conf
        state: touch

    - name: set up containerd prerequisites
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter

    - name: load modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: create network settings configuration file
      file:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        state: touch

    - name: set up containerd networking
      blockinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: apply settings
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

    - name: check if docker repository exists
      stat:
        path: /etc/yum.repos.d/docker-ce.repo
      register: docker_repo_exists

    - name: add docker repository
      yum_repository:
        name: docker-ce-stable
        description: Docker CE Stable - $basearch
        baseurl: https://download.docker.com/linux/centos/8/$basearch/stable
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        enabled: yes
      when: not docker_repo_exists.stat.exists

    - name: install containerd from new repository
      dnf:
        name: containerd.io
        state: present
      when: not docker_repo_exists.stat.exists

    - name: ensure containerd config directory exists
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate containerd configuration
      shell: containerd config default > /etc/containerd/config.toml

    - name: Configure containerd for Kubernetes
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        backup: yes

    - name: start and enable containerd (first time)
      systemd:
        name: containerd
        state: started
        enabled: yes
      when: not docker_repo_exists.stat.exists

    - name: create crictl configuration file (new repository)
      file:
        path: /etc/crictl.yaml
        state: touch
        mode: '0644'
      when: not docker_repo_exists.stat.exists

    - name: configure crictl for containerd (new repository)
      blockinfile:
        path: /etc/crictl.yaml
        block: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          timeout: 10
          debug: false
      when: not docker_repo_exists.stat.exists

    - name: install containerd if repository already exists
      dnf:
        name: containerd.io
        state: present
      when: docker_repo_exists.stat.exists

    - name: ensure containerd config directory exists (existing repo)
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
      when: docker_repo_exists.stat.exists

    - name: Generate containerd configuration (existing repo)
      shell: containerd config default > /etc/containerd/config.toml
      when: docker_repo_exists.stat.exists

    - name: Configure containerd for Kubernetes (existing repo)
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        backup: yes
      when: docker_repo_exists.stat.exists

    - name: restart and enable containerd (for config changes)
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: create crictl configuration file
      file:
        path: /etc/crictl.yaml
        state: touch
        mode: '0644'

    - name: configure crictl for containerd
      blockinfile:
        path: /etc/crictl.yaml
        block: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          timeout: 10
          debug: false

    - name: create k8s repo file
      file:
        path: /etc/yum.repos.d/kubernetes.repo
        state: touch

    - name: write repository information in the kube repo file
      blockinfile:
        path: /etc/yum.repos.d/kubernetes.repo
        block: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key


    - name: install kubernetes
      dnf:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: enable kubelet service (but do not start until cluster init)
      systemd:
        name: kubelet
        enabled: yes

    - name: check if swap is already disabled in fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^[^#]*\s+swap\s+'
        state: absent
      check_mode: yes
      register: swap_check
      changed_when: false

    - name: disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      when: swap_check.found
