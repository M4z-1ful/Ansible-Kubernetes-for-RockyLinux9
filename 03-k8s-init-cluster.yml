---
- hosts: masters
  become: yes
  any_errors_fatal: true
  tasks:
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeconfig_exists

    - name: Initialize Kubernetes cluster with kubeadm init
      command: >
        kubeadm init
        --apiserver-advertise-address={{ ansible_host }}
        --pod-network-cidr={{ pod_network_cidr }}
      register: kubeadm_init_result
      when: not kubeconfig_exists.stat.exists

    - name: Extract join command from kubeadm init output
      set_fact:
        join_command: "{{ kubeadm_init_result.stdout_lines | select('match', '^kubeadm join.*') | first }}"
      when: kubeadm_init_result is defined and kubeadm_init_result.stdout_lines is defined

    - name: Extract join token argument
      set_fact:
        join_token_arg: "{{ kubeadm_init_result.stdout_lines | select('match', '.*--token.*') | first | regex_search('--token [^ ]+') }}"
      when: kubeadm_init_result is defined and kubeadm_init_result.stdout_lines is defined

    - name: Extract discovery token ca cert hash argument
      set_fact:
        join_hash_arg: "{{ kubeadm_init_result.stdout_lines | select('match', '.*--discovery-token-ca-cert-hash.*') | first | regex_search('--discovery-token-ca-cert-hash [^ ]+') }}"
      when: kubeadm_init_result is defined and kubeadm_init_result.stdout_lines is defined

    - name: Generate join command if cluster already exists
      command: kubeadm token create --print-join-command
      register: existing_join_command
      when: kubeconfig_exists.stat.exists
      changed_when: false

    - name: Set join command variables from existing cluster
      set_fact:
        join_token_arg: "{{ existing_join_command.stdout | regex_search('--token [^ ]+') }}"
        join_hash_arg: "{{ existing_join_command.stdout | regex_search('--discovery-token-ca-cert-hash [^ ]+') }}"
      when: existing_join_command is defined and existing_join_command.stdout is defined

    - name: Create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Set up kubeconfig for kubectl
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
      when: kubeconfig_exists.stat.exists or (kubeadm_init_result is defined and kubeadm_init_result.rc == 0)

    - name: Wait for API server to be ready
      wait_for:
        port: 6443
        host: "{{ ansible_host }}"
        delay: 10
        timeout: 300

    - name: Check if Calico is already installed
      command: kubectl get pods -n kube-system -l k8s-app=calico-node --no-headers
      register: calico_check
      ignore_errors: yes
      changed_when: false

    - name: Install Calico network plugin
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      when: calico_check.rc != 0 or calico_check.stdout_lines | length == 0

    - name: Display join command for reference
      debug:
        msg: "Join command: kubeadm join {{ ansible_host }}:6443 {{ join_token_arg }} {{ join_hash_arg }}"
      when: join_token_arg is defined and join_hash_arg is defined

- hosts: workers
  become: yes
  any_errors_fatal: true
  tasks:
    - name: Check if worker node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: worker_joined_check

    - name: Join worker nodes to Kubernetes cluster
      command: >
        kubeadm join {{ hostvars[groups['masters'][0]]['ansible_host'] }}:6443
        {{ hostvars[groups['masters'][0]]['join_token_arg'] }}
        {{ hostvars[groups['masters'][0]]['join_hash_arg'] }}
      register: join_result
      when: 
        - not worker_joined_check.stat.exists
        - hostvars[groups['masters'][0]]['join_token_arg'] is defined

    - name: Display join result
      debug:
        var: join_result
      when: join_result is defined
